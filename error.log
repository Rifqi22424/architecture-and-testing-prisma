{"level":"error","message":"400 - Password must be at least 8 characters long and include at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 special character - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Invalid email format - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Password must be at least 8 characters long and include at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 special character - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Password must be at least 8 characters long and include at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 special character - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Password must be at least 8 characters long and include at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 special character - /auth/register - POST - ::1"}
{"level":"error","message":"500 - \nInvalid `prisma.user.create()` invocation in\nD:\\NodeJs\\clean_architecture\\services\\authService.js:42:36\n\n  39 \n  40 const hashedPassword = await bcrypt.hash(password, 10);\n  41 \n→ 42 const user = await prisma.user.create({\n       data: {\n         name: \"Rifqi\",\n         email: \"rifqi@gmail.com\",\n         password: \"$2b$10$XA61Dq0V61jEhBP0KHrgB.zi02W2/luyb6aGo6xqxjR1ljOhMPfFa\",\n         ~~~~~~~~\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime\n       }\n     })\n\nUnknown argument `password`. Available options are marked with ?. - /auth/register - POST - ::1"}
{"level":"error","message":"500 - \nInvalid `prisma.user.create()` invocation in\nD:\\NodeJs\\clean_architecture\\services\\authService.js:42:36\n\n  39 \n  40 const hashedPassword = await bcrypt.hash(password, 10);\n  41 \n→ 42 const user = await prisma.user.create({\n       data: {\n         name: \"Rifqi\",\n         email: \"rifqi@gmail.com\",\n         password: \"$2b$10$pNzYFmrCYPsBHJZ5kQCVcu8YNQpnJjnc.eDOqr5UZ2wPP5VfirxRa\",\n         ~~~~~~~~\n     ?   createdAt?: DateTime,\n     ?   updatedAt?: DateTime\n       }\n     })\n\nUnknown argument `password`. Available options are marked with ?. - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Email is already registered - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Email is already registered - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Email and password are required - /auth/login - POST - ::1"}
{"level":"error","message":"400 - Invalid email or password - /auth/login - POST - ::1"}
{"level":"error","message":"500 - \nInvalid `prisma.user.findUnique()` invocation in\nD:\\NodeJs\\clean_architecture\\services\\userService.js:19:36\n\n  16 \n  17 // Get User by UUID\n  18 const getUserByUuid = async (uuid) => {\n→ 19     const user = await prisma.user.findUnique({\n           where: {\n             uuid: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   deletedAt?: DateTimeNullableFilter | DateTime | Null\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `uuid` or `email` arguments. Available options are marked with ?. - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - GET - ::1"}
{"level":"error","message":"500 - \nInvalid `prisma.user.findUnique()` invocation in\nD:\\NodeJs\\clean_architecture\\services\\userService.js:19:36\n\n  16 \n  17 // Get User by UUID\n  18 const getUserByUuid = async (uuid) => {\n→ 19     const user = await prisma.user.findUnique({\n           where: {\n             uuid: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   deletedAt?: DateTimeNullableFilter | DateTime | Null\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `uuid` or `email` arguments. Available options are marked with ?. - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - GET - ::1"}
{"level":"error","message":"500 - \nInvalid `prisma.user.findUnique()` invocation in\nD:\\NodeJs\\clean_architecture\\services\\userService.js:19:36\n\n  16 \n  17 // Get User by UUID\n  18 const getUserByUuid = async (uuid) => {\n→ 19     const user = await prisma.user.findUnique({\n           where: {\n             uuid: undefined,\n         ?   email?: String,\n         ?   AND?: UserWhereInput | UserWhereInput[],\n         ?   OR?: UserWhereInput[],\n         ?   NOT?: UserWhereInput | UserWhereInput[],\n         ?   name?: StringFilter | String,\n         ?   password?: StringFilter | String,\n         ?   createdAt?: DateTimeFilter | DateTime,\n         ?   updatedAt?: DateTimeFilter | DateTime,\n         ?   deletedAt?: DateTimeNullableFilter | DateTime | Null\n           }\n         })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `uuid` or `email` arguments. Available options are marked with ?. - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - GET - ::1"}
{"level":"error","message":"500 - validate is not a function - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - PUT - ::1"}
{"level":"error","message":"500 - validate is not a function - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - PUT - ::1"}
{"level":"error","message":"400 - Email is already registered - /auth/register - POST - ::1"}
{"level":"error","message":"500 - validate is not a function - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Invalid email format - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - PUT - ::1"}
{"level":"error","message":"404 - User not found - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - DELETE - ::1"}
{"level":"error","message":"500 - \"User already soft-deleted\" is not a constructor - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - DELETE - ::1"}
{"level":"error","message":"404 - User already soft-deleted - /users/940809a3-34f6-4afb-b488-a06dd9f81a21 - DELETE - ::1"}
{"level":"error","message":"404 - User not found - /users/940809a3-34f6-4afb-b488-a06dd9f81a21/hard - DELETE - ::1"}
{"level":"error","message":"404 - User not found - /auth/login - POST - ::1"}
{"level":"error","message":"400 - Email is already registered - /auth/register - POST - ::1"}
{"level":"error","message":"400 - Password must be at least 8 characters long and include at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 special character - /auth/register - POST - ::ffff:127.0.0.1"}
{"level":"error","message":"400 - Invalid email format - /auth/register - POST - ::ffff:127.0.0.1"}
{"level":"error","message":"404 - User not found - /auth/login - POST - ::ffff:127.0.0.1"}
{"level":"error","message":"404 - User not found - /auth/login - POST - ::ffff:127.0.0.1"}
